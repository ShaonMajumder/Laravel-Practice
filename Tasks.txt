21-11-2020
Created Project Folder
	composer create-project --prefer-dist laravel/laravel blog
Setup Xampp Localhost directory
	Change Document Root
	Restart
Creating VirtualHost
Go to C:\xampp\apache\conf\extra\httpd-vhosts.conf
Add the lines:
<VirtualHost shaon.test:80>
    DocumentRoot "E:\Shaon\blog\public"
    <Directory "E:\Shaon\blog\public">
        Options Indexes FollowSymLinks
        AllowOverride all
        Require all granted
    </Directory>
</VirtualHost>
Adding shaon.test to windows host file
Editing Home file & adding home.blade.php to route
Listing document files in laravel project
	php artisan route:list
Directives

22-11-2020
Checking the route first  - php artisan route:list
If not add route method in routes>web.php
Solving bootstrap path issues by adding asset() method and keeping assets to public folder
route: get vs view method
passing parameters
Using routes


23-11-2020
Controller Basics
php artisan make:controller HomeController
Routing with controller
Database Configuration
Managing Environment Variables (htacces/.env/appache vhost conf)

Work-update 24-11-2020
Database Migrations
	Look after DB PORT 3306
	migrations classes : up, down
	migrate command on terminal : php artisan migrate
	Change database schema in all migrations file in laravel.  email to 191
	Drop all the table: failed jobs, password resets, migrations, users
	migrate command on terminal : php artisan migrate . The dropped databases are being recreated
	migrations table holds all the migrations mentioned in migration table
Creating own migration
	Schema::method name - Arguments: table name, closure function(Blueprint object)
	Make Migration:	php artisan make:migration name   . If name includes create_****_table create refers laravel to make a boilerplate to create a new table with the rest of the name. Random name will make random filename with empty methods.
	Instead you can use: php artisan make:migration name_of_file --create=table_name
	php artisan make:migration create_blogposts_table
	php artisan migrate
	schema fascade:
	role back the change: php artisan migrate:rollback . Calling the down methods deleting and rolling back mysql database.
	get rid of changes you have made: delete the unnecessary migrations file, in this case: blogposts table
	To make changes to existing table mention the name of the table with underscore: php artisan make:migration add_content_to_blogposts_table   . Creating table method . If your name doesnt reflect an existing table name use --table suffix. php artisan make:migration add_content --table=blogposts
	In table method, create $table->datatype(name);
	dropColumn(name or array);
	To undo: php artisan migrate:rollback
	To migrate again: php artisan migrate
Laravel Tinker and Eloquent models
	Eloquent: laravel libray called Object Relation Mapping(ORM): php class corsponds to particular table->	fetch the data and store the data
	To make a model: php artisan make:model name.
	php artisan make:model BlogPost  . check at App folder
	To run php file tool : php artisan tinker
	if you have problem, look for php.ini or to get the location : php -i | grep 'php.ini'
	$posts = App\BlogPost::all(); fetch all the records with model
	if error it might be can not find the database,
	Go to model file BlogPost.php
	Extend the model - protected $table = 'blogposts'; // for exception of naming convention
	exit to exit
	restart tinker : php artisan tinker
	$posts = App\BlogPost::all(); fetch all the records with model

	It will work now.
	To make verylongTrainmodel >> php artisan make:model VeryLongTrain -m      or         php artisan make:model VeryLongTrain --migration
	Delete after it is following snake case or laravel naming convention
	New migration for naming convetion change - php artisan make:migration change_blogposts_table_name --table=blogposts
	add action  - Schema::rename('blogposts','blog_posts');
	php artisan migrate
Creating, updating and reading data and making simple database queries
	php artisan tinker
	showing all the data - $posts = App\BlogPost::all(); 
	create the BlogPost object - $post = new App\BlogPost();
	adding field title - $post -> title='New Title';
	adding field content - $post -> content='New content';
	show object - $post
	save object - $post-save();
	showing all the blogposts - $posts = App\BlogPost::all(); 
	fetch the data and put inside it - $post2 = App\BlogPost::find(1);
	show the object - $post2
        $post2->title = 'modified title';
	$post2->save();
	$posts = App\BlogPost::all();
	$post3 = new App\BlogPost();
	$post3 -> title='random';
	$post3 -> content='whatever';
	$post3 -> save();
	$posts = App\BlogPost:all();
	$specificPosts = App\BlogPost::find([1,2]);
	$posts[0]
	$posts[1]
	$posts[2]
	printing all the title - foreach($posts as $post){ echo "{$post->title}\n"; }
	$posts->first();
	$posts->last();
	simple query- App\BlogPost::where('title','random')->get();
	to get the first model - App\BlogPost::where('title','random')->get()->first();

	$posts = App\BlogPost:all();
	$posts[0]->title="This is our first post.";
	$posts[0]->save();

Resource controllers
	comments{{--  --}}	
	
	
26-11-2020
Routes - 1. static 2. dynamic

Understanding Routing in Laravel
Routing function get /post /put /path /delete

Check the cheatseet for reference 


routing URI page-name/{id}

Udemy
Static method Route - parameters = URI, Controller(Anonynys Function/Name of method)

php artisan serve
- The serve command is just a shortcut for the PHP Built-in Webserver, something PHP has out of the box, so the point of using it is to start testing your application as fast as you could, you just need to install PHP, Composer and your application is up (if you don't need anything else, of course). But if you already have Nginx installed, there is no point at all, just use it.
php artisan route:list
- list the routes table

Required parameters , optional parameters?

Getting the first record from model
BlogPost::find(1)
BlogPost::find([1,2,3])
findorfail() - throws exception if not found
all() - all the records as collections
collections act like array
count() 

query builder
where,select,join

Generate 5 model records - User::factory()->count(5)->create()
User::where('id','>=',2)->orderBy('id','desc')->get();






